# -*- coding: utf-8 -*-
"""NACC_HABS-HD_Mapping

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NGSyxpQmfoiHzAOx8k3nVAzPAi2aj-yY

# **Mapping**
"""

# Load HD_Release_6_Clinical_FINAL
from google.colab import drive
import pandas as pd
import numpy as np
drive.mount('/content/drive')
file_path = '/content/drive/MyDrive/nacc habs-hd mapping/HD_Release_6_Clinical_FINAL.xlsx'
df = pd.read_excel(file_path)

## Form Header and Milestones Form
form1_list = []
# Med_ID -> NACCID
cols_to_save = []
import re
def format_id(value):
  digits = re.sub(r'\D', '', str(value))
  if digits:
    num = int(digits)
    return f"NACC00{num}"
  return None
df['NACCID'] = df['Med_ID'].apply(format_id)
cols_to_save.append('NACCID')
form1_list.append('NACCID')
output_path = '/content/drive/MyDrive/nacc habs-hd mapping/HD_Release_6_Clinical_Harmonized.xlsx'

# Visit_Date -> VISITMO, VISITDAY, and VISITYR
def split_visit_date(value):
  if str(value) in ['-9999', '-8888']:
    return [str(value), str(value), str(value)]
  try:
    date = pd.to_datetime(value, errors='coerce')
    if pd.isna(date):
      return [None, None, None]
    return [date.month, date.day, date.year]
  except:
    return [None, None, None]
df[['VISITMO', 'VISITDAY', 'VISITYR']] = df['Visit_Date'].apply(split_visit_date).apply(pd.Series)
cols_to_save.append('VISITMO')
form1_list.append('VISITMO')
cols_to_save.append('VISITDAY')
form1_list.append('VISITDAY')
cols_to_save.append('VISITYR')
form1_list.append('VISITYR')

# Visit_ID -> NACCVNUM
df['NACCVNUM'] = df['Visit_ID']
cols_to_save.append('NACCVNUM')
form1_list.append('NACCVNUM')

# Visit_ID -> NACCAVST
df['MIL.NACCAVST'] = df.groupby('NACCID')['NACCID'].transform('count')
cols_to_save.append('MIL.NACCAVST')
form1_list.append('MIL.NACCAVST')

# Interview_Site -> NACCNVST
df['MIL.NACCNVST'] = df['MIL.NACCAVST']
cols_to_save.append('MIL.NACCNVST')
form1_list.append('MIL.NACCNVST')

## Form A1: Subject Demographics
forma1_list = []

# Informant_SubjectRelationship -> NACCREFR
def transform_relationship(value):
  if value in [1, 2, 3, 4, 5]:
    return 1
  elif value == 6:
    return 2
  elif value == 7:
    return np.nan
  elif value == -8888:
    return np.nan
  elif value == -9999:
    return np.nan
  return value
df['DEM.NACCREFR'] = df['Informant_SubjectRelationship'].apply(transform_relationship)
cols_to_save.append('DEM.NACCREFR')
forma1_list.append('DEM.NACCREFR')

# ID_Hispanic -> HISPOR
mapping_hispanic = {2:1, 3:2, 4:3, 5:50, 1:np.nan, -9999:np.nan, -8888:np.nan}
df['DEM.HISPOR'] = df['ID_Hispanic'].replace(mapping_hispanic)
cols_to_save.append('DEM.HISPOR')
forma1_list.append('DEM.HISPOR')

# ID_Hispanic -> HISPANIC (based on HISPOR)
def map_hispanic(value):
  if value in [1, 2, 3, 50]:
    return 1
  elif value == 88:
    return 0
  elif value in [-4, 99]:
    return np.nan
df['DEM.HISPANIC'] = df['DEM.HISPOR'].apply(map_hispanic)
cols_to_save.append('DEM.HISPANIC')
forma1_list.append('DEM.HISPANIC')

# ID_Hispanic_Other -> HISPORX
def transform_hisporx(value):
  if value == -9999:
    return np.nan
  else:
    return value
df['DEM.HISPORX'] = df['ID_Hispanic_Other'].apply(transform_hisporx)
cols_to_save.append('DEM.HISPORX')
forma1_list.append('DEM.HISPORX')

# ID_Race_White, ID_Race_Black, ID_Race_IndianAlaska, ID_Race_Asian, ID_Race_NativeHawaiian, ID_Race_Other -> RACE
race_cols = ['ID_Race_White', 'ID_Race_Black', 'ID_Race_IndianAlaska', 'ID_Race_Asian', 'ID_Race_NativeHawaiian', 'ID_Race_Other']
def determine_race(row):
  values = [row[col] for col in race_cols]
  if all(v in [-8888, -9999] for v in values):
    return np.nan
  if all(pd.isna(v) for v in values):
    return np.nan
  if row['ID_Race_White'] == 1:
    return 1
  if row['ID_Race_Black'] == 1:
    return 2
  if row['ID_Race_IndianAlaska'] == 1:
    return 3
  if row['ID_Race_NativeHawaiian'] == 1:
    return 4
  if row['ID_Race_Asian'] == 1:
    return 5
  if row['ID_Race_Other'] == 1:
    return 50
  if all(v == 0 for v in values):
    return np.nan
  return np.nan
df['DEM.RACE'] = df.apply(determine_race, axis=1)
cols_to_save.append('DEM.RACE')
forma1_list.append('DEM.RACE')

# ID_Language_Primary -> PRIMLANG
mapping_language = {1:1, 2:2, 3:3, -8888:np.nan, -9999:np.nan} # 1: English, 2: Spanish, 3: Other
df['DEM.PRIMLANG'] = df['ID_Language_Primary'].replace(mapping_language)
cols_to_save.append('DEM.PRIMLANG')
forma1_list.append('DEM.PRIMLANG')

# ID_Education -> EDUC
df['DEM.EDUC'] = df['ID_Education']
cols_to_save.append('DEM.EDUC')
forma1_list.append('DEM.EDUC')

# ID_MaritalStatus -> MARISTAT
mapping_marital = {1:1, 2:3, 3:4, 4:2, 5:5, -9999:6, 6:np.nan, -8888:np.nan}
df['DEM.MARISTAT'] = df['ID_MaritalStatus'].replace(mapping_marital)
cols_to_save.append('DEM.MARISTAT')
forma1_list.append('DEM.MARISTAT')

# CDR_HH_Household_Level -> INDEPEND
mapping_independ = {5:1, 4:2, 3:3, 2:3, 1:4, -8888:np.nan, -9999:np.nan}
df['DEM.INDEPEND'] = df['CDR_HH_Household_Level'].map(mapping_independ)
cols_to_save.append('DEM.INDEPEND')
forma1_list.append('DEM.INDEPEND')

# Age -> NACCAGE
df['DEM.NACCAGE'] = df['Age']
cols_to_save.append('DEM.NACCAGE')
forma1_list.append('DEM.NACCAGE')

## Form A2: Co-participant Demographics
forma2_list =[]

# Informant_YOB -> INFIRYR
df['CODEM.INFIRYR'] = df['Informant_YOB']
cols_to_save.append('CODEM.INFIRYR')
forma2_list.append('CODEM.INFIRYR')

# Informant_Sex -> INSEX
mapping_sex = {0:1, 1:2, -8888:np.nan, -9999:np.nan}
df['CODEM.INSEX'] = df['Informant_Sex'].map(mapping_sex)
cols_to_save.append('CODEM.INSEX')
forma2_list.append('CODEM.INSEX')

# Informant_OriginHLS -> INHISPOR
df['CODEM.INHISPOR'] = df['Informant_OriginHLS'].replace(mapping_hispanic)
cols_to_save.append('CODEM.INHISPOR')
forma2_list.append('CODEM.INHISPOR')

# Informant_OriginHLS -> INHISP (based on INHISPOR)
df['CODEM.INHISP'] = df['CODEM.INHISPOR'].apply(map_hispanic)
cols_to_save.append('CODEM.INHISP')
forma2_list.append('CODEM.INHISP')

# Inf_Hispanic_Other -> INHISPOX
general_map = {-9999:np.nan, -8888:np.nan, -4:np.nan}
df['CODEM.INHISPOX'] = df['Inf_Hispanic_Other']
df['CODEM.INHISPOX'] = df['CODEM.INHISPOX'].replace(general_map)
cols_to_save.append('CODEM.INHISPOX')
forma2_list.append('CODEM.INHISPOX')

# Informant_Race_White, Informant_Race_Black, Informant_Race_IndianAlaska, Informant_Race_Asian, Informant_Race_NativeHawaiian, Informant_Race_Other -> INRACE
race_cols = ['Informant_Race_White', 'Informant_Race_Black', 'Informant_Race_IndianAlaska', 'Informant_Race_Asian', 'Informant_Race_NativeHawaiian', 'Informant_Race_Other']
def determine_race(row):
  values = [row[col] for col in race_cols]
  if all(v in [-8888, -9999] for v in values):
    return np.nan
  if all(pd.isna(v) for v in values):
    return np.nan
  if row['Informant_Race_White'] == 1:
    return 1
  if row['Informant_Race_Black'] == 1:
    return 2
  if row['Informant_Race_IndianAlaska'] == 1:
    return 3
  if row['Informant_Race_NativeHawaiian'] == 1:
    return 4
  if row['Informant_Race_Asian'] == 1:
    return 5
  if row['Informant_Race_Other'] == 1:
    return 50
  if all(v == 0 for v in values):
    return np.nan
  return np.nan
df['CODEM.INRACE'] = df.apply(determine_race, axis=1)
cols_to_save.append('CODEM.INRACE')
forma2_list.append('CODEM.INRACE')

# Informant_Race_Other -> INRACEX
df['CODEM.INRACEX'] = df['Informant_Race_Specify']
df['CODEM.INRACEX'] = df['CODEM.INRACEX'].replace(general_map)
cols_to_save.append('CODEM.INRACEX')
forma2_list.append('CODEM.INRACEX')

# Informant_Education_Level -> INEDUC
df['CODEM.INEDUC'] = df['Informant_EducationLevel']
df['CODEM.INEDUC'] = df['CODEM.INEDUC'].replace(general_map)
cols_to_save.append('CODEM.INEDUC')
forma2_list.append('CODEM.INEDUC')

# Informant_SubjectRelationship -> INRELTO
mapping_inrelto = {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, -9999:np.nan, -8888:np.nan}
df['CODEM.INRELTO'] = df['Informant_SubjectRelationship'].map(mapping_inrelto)
cols_to_save.append('CODEM.INRELTO')
forma2_list.append('CODEM.INRELTO')

# Informant_SubjectRelationship_Other -> INRELTOX
df['CODEM.INRELTOX'] = df['Informant_SubjectRelationship_Other']
df['CODEM.INRELTOX'] = df['CODEM.INRELTOX'].replace(general_map)
cols_to_save.append('CODEM.INRELTOX')
forma2_list.append('CODEM.INRELTOX')

# Informant_LiveWith -> INLIVWTH
mapping_livewith = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CODEM.INLIVWTH'] = df['Informant_LiveWith'].map(mapping_livewith)
cols_to_save.append('CODEM.INLIVWTH')
forma2_list.append('CODEM.INLIVWTH')

# Informant_LiveWith_No_Visit ->INVISITS
mapping_visits = {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, -9999:np.nan, -8888:np.nan}
df['CODEM.INVISITS'] = df['Informant_LiveWith_No_Visit'].map(mapping_visits)
cols_to_save.append('CODEM.INVISITS')
forma2_list.append('CODEM.INVISITS')

# Informant_LiveWith_No_Calls -> INCALLS
df['CODEM.INCALLS'] = df['Informant_LiveWith_No_Calls'].map(mapping_visits)
cols_to_save.append('CODEM.INCALLS')
forma2_list.append('CODEM.INCALLS')

# Informant_Reliability -> INRELY
mapping_rely = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CODEM.INRELY'] = df['Informant_Reliability'].map(mapping_rely)
cols_to_save.append('CODEM.INRELY')
forma2_list.append('CODEM.INRELY')

## Form A3: Subject Family History
forma3_list = []

# Family_History_Firstdegree -> NACCFAM
mapping_famhist = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['FAM.NACCFAM'] = df['Family_History_Firstdegree'].map(mapping_famhist)
cols_to_save.append('FAM.NACCFAM')
forma3_list.append('FAM.NACCFAM')

## Form A4: Subject Medications
forma4_list = []

# TakingMedications -> ANYMEDS and NACCAMD (number of medications)
med_cols = [f'Medication_{i}_Name' for i in range(1, 26)]
def count_valid_meds(row):
  values = row[med_cols]
  return np.sum(~values.isin([-9999, -8888]))
df['MED.NACCAMD'] = df.apply(count_valid_meds, axis=1)
cols_to_save.append('MED.NACCAMD')
forma4_list.append('MED.NACCAMD')
def determine_anymeds(val):
  if val in [-9999, -8888]:
    return np.nan
  return 1 if val > 0 else 0
df['MED.ANYMEDS'] = df['MED.NACCAMD'].apply(determine_anymeds)
cols_to_save.append('MED.ANYMEDS')
forma4_list.append('MED.ANYMEDS')

# Medication_1_Name - Medication_25_Name -> DRUG1 - DRUG25
mapping_rename_meds = {f'Medication_{i}_Name': f'MED.DRUG{i}' for i in range(1, 26)}
df.rename(columns=mapping_rename_meds, inplace=True)
for i in range(1, 26):
  col_name = f'MED.DRUG{i}'
  df[col_name] = df[col_name].replace(general_map)
  cols_to_save.append(col_name)
  forma4_list.append(col_name)

# Med_Aricept, Med_Razadyne, Med_Exelon, Med_Namzaric, Med_Namenda -> NACCADMD
admed_cols = ['Med_Aricept', 'Med_Razadyne', 'Med_Exelon', 'Med_Namzaric', 'Med_Namenda']
admed_df = df[admed_cols].apply(pd.to_numeric, errors='coerce')
cond_any1 = (admed_df == 1).any(axis=1)
cond_all0 = (admed_df == 0).all(axis=1)
cond_all_missing = admed_df.apply(lambda r: r.isin([-8888, -9999]).all(), axis=1)
df['MED.NACCADMD'] = np.select([cond_any1, cond_all0, cond_all_missing], [1, 0, -4], default=0)
df['MED.NACCADMD'] = df['MED.NACCADMD'].replace(general_map)
cols_to_save.append('MED.NACCADMD')
forma4_list.append('MED.NACCADMD')

# DSQ_Meds -> NACCDBMD
mapping_dsq = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['MED.NACCDBMD'] = df['DSQ_Meds'].map(mapping_dsq)
cols_to_save.append('MED.NACCDBMD')
forma4_list.append('MED.NACCDBMD')

## Form A5: Subject Health History
forma5_list = []

# Smoke_Currently -> TOBAC30
mapping_tobacco = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.TOBAC30'] = df['Smoke_Currently'].map(mapping_tobacco)
cols_to_save.append('HLT.TOBAC30')
forma5_list.append('HLT.TOBAC30')

# SubstanceUse_Smoke_EndAge - SubstanceUse_Smoke_BeginAge -> SMOKYRS
col_begin = 'SubstanceUse_Smoke_BeginAge'
col_end = 'SubstanceUse_Smoke_EndAge'
def calculate_smokyrs(row):
  begin = row[col_begin]
  end = row[col_end]
  if begin not in [-9999, -8888] and end not in [-9999, -8888]:
    return end - begin
  if begin == -9999 and end == -9999:
    return 0
  if (begin == -9999 and end not in [-9999, -8888]) or (end == -9999 and begin not in [-9999, -8888]):
    return np.nan
  if (begin == -8888 and end not in [-9999, -8888]) or (end == -8888 and begin not in [-9999, -8888]):
    return np.nan
  return np.nan
df['HLT.SMOKYRS'] = df.apply(calculate_smokyrs, axis=1)
cols_to_save.append('HLT.SMOKYRS')
forma5_list.append('HLT.SMOKYRS')

# Smoke_Ever_PerDay -> PACKSPER
def calculate_packsper(value):
  if value == -9999:
    return np.nan
  if value == -8888:
    return np.nan
  if value == 0:
    return 0
  if pd.isna(value):
    return np.nan
  packs = value / 20
  if 0 < packs < 0.5:
    return 1
  elif 0.5 <= packs < 1:
    return 2
  elif 1 <= packs < 1.5:
    return 3
  elif 1.5 <= packs <= 2:
    return 4
  elif packs > 2:
    return 5
  return np.nan
df['HLT.PACKSPER'] = df['Smoke_Ever_PerDay'].apply(calculate_packsper)
cols_to_save.append('HLT.PACKSPER')
forma5_list.append('HLT.PACKSPER')

# SubstanceUse_Smoke_EndAge -> QUITSMOK
df['HLT.QUITSMOK'] = df['SubstanceUse_Smoke_EndAge']
df['HLT.QUITSMOK'] = df['HLT.QUITSMOK'].replace(general_map)
cols_to_save.append('HLT.QUITSMOK')
forma5_list.append('HLT.QUITSMOK')

# AUDIT_1 -> ALCFREQ
mapping_alc = {0:0, 1:1, 2:2, 3:3, 4:4, -9999:np.nan, -8888:np.nan}
df['HLT.ALCFREQ'] = df['AUDIT_1'].map(mapping_alc)
cols_to_save.append('HLT.ALCFREQ')
forma5_list.append('HLT.ALCFREQ')

# CDP_Myocardial -> CVHATT
mapping_cvhatt = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.CVHATT'] = df['CDP_Myocardial'].map(mapping_cvhatt)
cols_to_save.append('HLT.CVHATT')
forma5_list.append('HLT.CVHATT')

# IMH_HeartAttackAge -> HATTYEAR
def compute_heart_attack_year(row):
  age_heart_attack = row.get('IMH_HeartAttackAge')
  visit_yr = row.get('VISITYR')
  current_age = row.get('DEM.NACCAGE')
  if pd.notna(age_heart_attack) and pd.notna(visit_yr) and pd.notna(current_age):
    if str(age_heart_attack) not in ['-9999', '-8888'] and str(visit_yr) not in ['-9999', '-8888'] and str(current_age) not in ['-9999', '-8888']:
      return int(visit_yr - (current_age - age_heart_attack))
  elif age_heart_attack == -8888:
    return np.nan
  elif age_heart_attack == -9999:
    return np.nan
  return np.nan
df['HLT.HATTYEAR'] = df.apply(compute_heart_attack_year, axis=1)
cols_to_save.append('HLT.HATTYEAR')
forma5_list.append('HLT.HATTYEAR')

# CDP_HeartDisease -> CVANGINA
mapping_angina = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.CVANGINA'] = df['CDP_HeartDisease'].map(mapping_angina)
cols_to_save.append('HLT.CVANGINA')
forma5_list.append('HLT.CVANGINA')

# IMH_HeartAttack -> CVOTHR
mapping_heartattack = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.CVOTHR'] = df['IMH_HeartAttack'].map(mapping_heartattack)
cols_to_save.append('HLT.CVOTHR')
forma5_list.append('HLT.CVOTHR')

# CDP_Stroke, HI_J, IMH_Stroke -> CVSTROKE
stroke_cols = ['CDP_Stroke', 'HI_J', 'IMH_Stroke']
def determine_cvstroke(row):
  values = [row[col] for col in stroke_cols]
  valid_values = [v for v in values if v in [0, 1]]
  if valid_values:
    return 1 if 1 in valid_values else 0
  if all(v == -9999 for v in values):
    return np.nan
  if all(v in [-8888, -9999] for v in values):
    return np.nan
  return np.nan
df['HLT.CVSTROKE'] = df.apply(determine_cvstroke, axis=1)
cols_to_save.append('HLT.CVSTROKE')
forma5_list.append('HLT.CVSTROKE')

# IMH_StrokeAge_1; IMH_StrokeAge_2; IMH_StrokeAge_3; IMH_StrokeAge_4; IMH_StrokeAge_5 -> NACCSTYR
stroke_age_cols = ['IMH_StrokeAge_1', 'IMH_StrokeAge_2', 'IMH_StrokeAge_3', 'IMH_StrokeAge_4', 'IMH_StrokeAge_5']
def calculate_naccstyr(row):
  values = [row[col] for col in stroke_age_cols]
  valid_values = [v for v in values if v not in [-9999, -8888] and not pd.isna(v)]
  if valid_values:
    return max(valid_values)
  if all(v == -9999 for v in values):
    return np.nan
  if all(v in [-8888, -9999] for v in values):
    return np.nan
  return np.nan
df['HLT.NACCSTYR'] = df.apply(calculate_naccstyr, axis=1)
df['HLT.NACCSTYR'] = df['HLT.NACCSTYR'].apply(lambda x: 2025 - x if x not in [8888, 9999, np.nan] else x)
cols_to_save.append('HLT.NACCSTYR')
forma5_list.append('HLT.NACCSTYR')

# CDP_MiniStroke -> CBTIA
mapping_tia = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.CBTIA'] = df['CDP_MiniStroke'].map(mapping_tia)
cols_to_save.append('HLT.CBTIA')
forma5_list.append('HLT.CBTIA')

# IMH_Parkinsons -> PD
mapping_pd = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.PD'] = df['IMH_Parkinsons'].map(mapping_pd)
cols_to_save.append('HLT.PD')
forma5_list.append('HLT.PD')

# IMH_ParkinsonsAge -> PDYR
def compute_parkinsons_year(row):
  age_parkinsons = row.get('IMH_ParkinsonsAge')
  visit_yr = row.get('VISITYR')
  current_age = row.get('DEM.NACCAGE')
  if pd.notna(age_parkinsons) and pd.notna(visit_yr) and pd.notna(current_age):
    if str(age_parkinsons) not in ['-9999', '-8888'] and str(visit_yr) not in ['-9999', '-8888'] and str(current_age) not in ['-9999', '-8888']:
      return int(visit_yr - (current_age - age_parkinsons))
  elif age_parkinsons == -8888:
    return np.nan
  elif age_parkinsons == -9999:
    return np.nan
  return np.nan
df['HLT.PDYR'] = df.apply(compute_parkinsons_year, axis=1)
cols_to_save.append('HLT.PDYR')
forma5_list.append('HLT.PDYR')

# IN_Seizure -> SEIZURES
mapping_seizure = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.SEIZURES'] = df['IN_Seizure'].map(mapping_seizure)
cols_to_save.append('HLT.SEIZURES')
forma5_list.append('HLT.SEIZURES')

# IMH_TBI -> TBI
mapping_tbi = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.TBI'] = df['IMH_TBI'].map(mapping_tbi)
cols_to_save.append('HLT.TBI')
forma5_list.append('HLT.TBI')

# OSU_TBI_(1-5)_(1-5)_Loc -> TBIBRIEF
tbi_columns = [f'OSU_TBI_{i}_{j}_Loc' for i in range(1, 6) for j in range(1, 6)]
def calculate_tbibrief(row):
  values = [row[col] for col in tbi_columns if col in row]
  values = [v for v in values if not pd.isna(v)]
  if all(v == -9999 for v in values):
    return np.nan
  if all(v in [-8888, -9999] for v in values):
    return np.nan
  count_1 = sum(v == 1 for v in values)
  count_2 = sum(v == 2 for v in values)
  count_3_4 = sum(v in [3, 4] for v in values)
  if count_1 >= 1 and count_2 == 0 and count_3_4 == 0:
    return 0
  if count_2 == 1 and count_3_4 == 0:
    return 1
  if count_2 > 1 and count_3_4 == 0:
    return 2
  if count_3_4 > 0:
    return 0
  return np.nan
df['HLT.TBIBRIEF'] = df.apply(calculate_tbibrief, axis=1)
cols_to_save.append('HLT.TBIBRIEF')
forma5_list.append('HLT.TBIBRIEF')

# OSU_TBI_(1-5)_(1-5)_Loc -> TBIEXTEN
tbi_columns = [f'OCU_TBI_{i}_{j}_Loc' for i in range(1, 6) for j in range(1, 6)]
def calculate_tbiexten(row):
  values = [row[col] for col in tbi_columns if col in row]
  values = [v for v in values if not pd.isna(v)]
  if all(v == -9999 for v in values):
    return np.nan
  if all(v in [-9999, -8888] for v in values):
    return np.nan
  count_1 = sum(v == 1 for v in values)
  count_2 = sum(v == 2 for v in values)
  count_3_4 = sum(v in [3, 4] for v in values)
  if count_1 >= 1 and count_2 == 0 and count_3_4 == 0:
    return 0
  if count_2 >= 1 and count_3_4 == 0:
    return np.nan
  if count_3_4 == 1:
    return 1
  if count_3_4 > 1:
    return 2
  return np.nan
df['HLT.TBIEXTEN'] = df.apply(calculate_tbiexten, axis=1)
cols_to_save.append('HLT.TBIEXTEN')
forma5_list.append('HLT.TBIEXTEN')

# OSU_TBI_(1-5)_Age -> TBIYEAR
tbi_age_cols = [f'OSU_TBI_{i}_{j}_Age' for i in range(1, 6) for j in range(1, 6)]
def calculate_tbiyear(row):
  values = [row[col] for col in tbi_age_cols if col in row]
  values = [v for v in values if not pd.isna(v)]
  if all(v == -9999 for v in values):
    return np.nan
  if all(v in [-8888, -9999] for v in values):
    return np.nan
  valid_ages = [v for v in values if v not in [-8888, -9999]]
  if valid_ages:
    max_age = max(valid_ages)
    return round(row['VISITYR'] - (row['DEM.NACCAGE'] - max_age)) if pd.notna(row['DEM.NACCAGE']) else np.nan
  return np.nan
df['HLT.TBIYEAR'] = df.apply(calculate_tbiyear, axis=1)
cols_to_save.append('HLT.TBIYEAR')
forma5_list.append('HLT.TBIYEAR')

# IMH_Diabetes, CDX_Diabetes -> DIABETES
def calculate_diabetes(row):
  imh = row.get('IMH_Diabetes')
  cdx = row.get('CDX_Diabetes')
  if imh == -9999 and cdx == -9999:
    return np.nan
  if (imh in [-8888, -9999]) and (cdx in [-8888, -9999]):
    return np.nan
  if imh == 0 and cdx == 0:
    return 0
  if imh == 1 and cdx == 1:
    return 1
  if (imh == 0 and cdx in [-9999, -8888]) or (cdx == 0 and imh in [-9999, -8888]):
    return 0
  if (imh == 1 and cdx in [-9999, -8888]) or (cdx == 1 and imh in [-9999, -8888]):
    return 1
  return np.nan
df['HLT.DIABETES'] = df.apply(calculate_diabetes, axis=1)
cols_to_save.append('HLT.DIABETES')
forma5_list.append('HLT.DIABETES')

# CDX_Hypertension -> HYPERTEN
mapping_hyperten = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.HYPERTENSION'] = df['CDX_Hypertension'].map(mapping_hyperten)
cols_to_save.append('HLT.HYPERTENSION')
forma5_list.append('HLT.HYPERTENSION')

# CDX_VitaminB12 -> B12DEF
mapping_b12 = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.B12DEF'] = df['CDX_VitaminB12'].map(mapping_b12)
cols_to_save.append('HLT.B12DEF')
forma5_list.append('HLT.B12DEF')

# IMH_ThyroidDisease, CDX_Hypothyroid, CDX_Hyperthyroid -> THYROID
def calculate_thyroid(row):
  vals = [row.get('IMH_ThyroidDisease'), row.get('CDX_Hypothyroid'), row.get('CDX_Hyperthyroid')]
  if all(v == -9999 for v in vals):
    return np.nan
  if all(v in [-8888, -9999] for v in vals):
    return np.nan
  if 1 in vals:
    return 1
  if all(v == 0 for v in vals):
    return 0
  if all(v in [0, -8888, -9999] for v in vals):
    return np.nan
  return np.nan
df['HLT.THYROID'] = df.apply(calculate_thyroid, axis=1)
cols_to_save.append('HLT.THYROID')
forma5_list.append('HLT.THYROID')

# IMH_Arthritis -> ARTHRIT
mapping_arthritis = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.ARTHRIT'] = df['IMH_Arthritis'].map(mapping_arthritis)
cols_to_save.append('HLT.ARTHRIT')
forma5_list.append('HLT.ARTHRIT')

# CDR_PC_SphincterControl -> INCONTU
mapping_incontu = {0:0, 1:1, 2:1, 3:1, -9999:np.nan, -8888:np.nan}
df['HLT.INCONTU'] = df['CDR_PC_SphincterControl'].map(mapping_incontu)
cols_to_save.append('HLT.INCONTU')
forma5_list.append('HLT.INCONTU')

# CDX_Alcohol -> ALCOHOL
mapping_alcohol = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['HLT.ALCOHOL'] = df['CDX_Alcohol'].map(mapping_alcohol)
cols_to_save.append('HLT.ALCOHOL')
forma5_list.append('HLT.ALCOHOL')

# IMH_Anxiety, CDX_Anxiety -> ANXIETY
def calculate_anxiety(row):
  vals = [row.get('IMH_Anxiety'), row.get('CDX_Anxiety')]
  if all(v == -9999 for v in vals):
    return np.nan
  if all(v in [-8888, -9999] for v in vals):
    return np.nan
  if 1 in vals:
    return 1
  if all(v == 0 for v in vals):
    return 0
  return np.nan
df['HLT.ANXIETY'] = df.apply(calculate_anxiety, axis=1)
cols_to_save.append('HLT.ANXIETY')
forma5_list.append('HLT.ANXIETY')

# OSU_TBI_(1-5) -> NACCTBI
tbi_cols = [f'OCU_TBI_{i}' for i in range(1, 6)]
def calculate_tbi(row):
  values = [row[col] for col in tbi_cols if col in row]
  values = [v for v in values if not pd.isna(v)]
  if all(v == -9999 for v in values):
    return np.nan
  if all(v in [-8888, -9999] for v in values):
    return np.nan
  if 1 in values:
    return 1
  if all(v == 0 for v in values):
    return 0
  if all(v in [0, -8888, -9999] for v in values):
    return np.nan
  return np.nan
df['HLT.NACCTBI'] = df.apply(calculate_tbi, axis=1)
cols_to_save.append('HLT.NACCTBI')
forma5_list.append('HLT.NACCTBI')

## Form B1: Physical
formb1_list = []

# OM_Height -> HEIGHT
def transform_height(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif 36 <= value <= 87.9:
    return value
  else:
    return np.nan
df['CLIN.HEIGHT'] = df['OM_Height'].apply(transform_height)
cols_to_save.append('CLIN.HEIGHT')
formb1_list.append('CLIN.HEIGHT')

# OM_Weight -> WEIGHT
def transform_weight(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif 50 <= value <= 400:
    return value
  else:
    return np.nan
df['CLIN.WEIGHT'] = df['OM_Weight'].apply(transform_weight)
cols_to_save.append('CLIN.WEIGHT')
formb1_list.append('CLIN.WEIGHT')

# OM_BMI -> NACCBMI
def transform_bmi(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif 10 <= value <= 100:
    return value
  else:
    return np.nan
df['CLIN.NACCBMI'] = df['OM_BMI'].apply(transform_bmi)
cols_to_save.append('CLIN.NACCBMI')
formb1_list.append('CLIN.NACCBMI')

# OM_BP1_SYS -> BPSYS
def transform_bp_sys(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif 70 <= value <= 230:
    return value
  else:
    return np.nan
df['CLIN.BPSYS'] = df['OM_BP1_SYS'].apply(transform_bp_sys)
cols_to_save.append('CLIN.BPSYS')
formb1_list.append('CLIN.BPSYS')

# OM_BP1_DIA -> BPDIAS
def transform_bp_dias(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif 30 <= value <= 140:
    return value
  else:
    return np.nan
df['CLIN.BPDIAS'] = df['OM_BP1_DIA'].apply(transform_bp_dias)
cols_to_save.append('CLIN.BPDIAS')
formb1_list.append('CLIN.BPDIAS')

# OM_BP2_SYS -> BPSYSL
df['CLIN.BPSYSL'] = df['OM_BP2_SYS'].apply(transform_bp_sys)
cols_to_save.append('CLIN.BPSYSL')
formb1_list.append('CLIN.BPSYSL')

# OM_BP2_SYS -> BPSYSR
df['CLIN.BPSYSR'] = df['CLIN.BPSYSL']
cols_to_save.append('CLIN.BPSYSR')
formb1_list.append('CLIN.BPSYSR')

# OM_BP2_DIA -> BPDIASL
df['CLIN.BPDIASL'] = df['OM_BP2_DIA'].apply(transform_bp_dias)
cols_to_save.append('CLIN.BPDIASL')
formb1_list.append('CLIN.BPDIASL')

# OM_BP2_DIA -> BPDIASR
df['CLIN.BPDIASR'] = df['CLIN.BPDIASL']
cols_to_save.append('CLIN.BPDIASR')
formb1_list.append('CLIN.BPDIASR')

# OM_Pulse1, OM_Pulse2 -> HRATE
def calculate_hrate(p1, p2):
  if p1 not in [-9999, -8888] and p2 not in [-9999, -8888]:
    return (p1 + p2) / 2
  if p1 in [-9999, -8888] and p2 not in [-9999, -8888]:
    return p2
  if p1 not in [-9999, -8888] and p2 in [-9999, -8888]:
    return p1
  if p1 == -9999 and p2 == -9999:
    return np.nan
  if (p1 in [-9999, -8888]) and {p2 in [-9999, -8888]}:
    return np.nan
  return np.nan
df['CLIN.HRATE'] = df.apply(lambda row: calculate_hrate(row['OM_Pulse1'], row['OM_Pulse2']), axis=1)
cols_to_save.append('CLIN.HRATE')
formb1_list.append('CLIN.HRATE')

# Visual_1 -> VISCORR
mapping_viscorr = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.VISCORR'] = df['Visual_1'].map(mapping_viscorr)
cols_to_save.append('CLIN.VISCORR')
formb1_list.append('CLIN.VISCORR')

# Visual_1 -> VISION
def calculate_vision(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif value == 0:
    return 1
  elif value == 1:
    return 0
  else:
    return np.nan
df['CLIN.VISION'] = df.apply(lambda row: calculate_vision(row['CLIN.VISCORR']), axis=1)
cols_to_save.append('CLIN.VISION')
formb1_list.append('CLIN.VISION')

# Visual_3 -> VISWCORR
mapping_viswcorr = {1:0, 2:1, 3:1, -9999:np.nan, -8888:np.nan}
df['CLIN.VISWCORR'] = df['Visual_3'].map(mapping_viswcorr)
cols_to_save.append('CLIN.VISWCORR')
formb1_list.append('CLIN.VISWCORR')

# Auditory_1 -> HEARAID
mapping_hearaid = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.HEARAID'] = df['Auditory_1'].map(mapping_hearaid)
cols_to_save.append('CLIN.HEARAID')
formb1_list.append('CLIN.HEARAID')

# Auditory_1 -> HEARING
def calculate_hearing(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif value == 0:
    return 1
  elif value == 1:
    return 0
  else:
    return np.nan
df['CLIN.HEARING'] = df.apply(lambda row: calculate_hearing(row['CLIN.HEARAID']), axis=1)
cols_to_save.append('CLIN.HEARING')
formb1_list.append('CLIN.HEARING')

# Auditory_3 -> HEARWAID
mapping_hearwaid = {1:0, 2:1, 3:1, 4:1, -9999:np.nan, -8888:np.nan}
df['CLIN.HEARWAID'] = df['Auditory_3'].map(mapping_hearwaid)
cols_to_save.append('CLIN.HEARWAID')
formb1_list.append('CLIN.HEARWAID')

## Form B2: HIS and CVD
formb2_list = []

# HI_A -> ABRUPT
mapping_abrupt = {0:0, 1:2, 2:2, -9999:np.nan, -8888:np.nan}
df['CLIN.ABRUPT'] = df['HI_A'].map(mapping_abrupt)
cols_to_save.append('CLIN.ABRUPT')
formb2_list.append('CLIN.ABRUPT')

# HI_B -> STEPWISE
mapping_stepwise = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.STEPWISE'] = df['HI_B'].map(mapping_stepwise)
cols_to_save.append('CLIN.STEPWISE')
formb2_list.append('CLIN.STEPWISE')

# HI_G -> SOMATIC
mapping_somatic = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.SOMATIC'] = df['HI_G'].map(mapping_somatic)
cols_to_save.append('CLIN.SOMATIC')
formb2_list.append('CLIN.SOMATIC')

# HI_H -> EMOT
mapping_emot = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.EMOT'] = df['HI_H'].map(mapping_emot)
cols_to_save.append('CLIN.EMOT')
formb2_list.append('CLIN.EMOT')

# HI_I -> HXHYPER
mapping_hxhyper = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.HXHYPER'] = df['HI_I'].map(mapping_hxhyper)
cols_to_save.append('CLIN.HXHYPER')
formb2_list.append('CLIN.HXHYPER')

# HI_J -> HXSTROKE
mapping_hxstroke = {0:0, 1:2, 2:2, -9999:np.nan, -8888:np.nan}
df['CLIN.HXSTROKE'] = df['HI_J'].map(mapping_hxstroke)
cols_to_save.append('CLIN.HXSTROKE')
formb2_list.append('CLIN.HXSTROKE')

# HI_L -> FOCLSYM
mapping_focls = {0:0, 1:2, -9999:np.nan, -8888:np.nan}
df['CLIN.FOCLSYM'] = df['HI_L'].map(mapping_focls)
cols_to_save.append('CLIN.FOCLSYM')
formb2_list.append('CLIN.FOCLSYM')

# HI_M -> FOCLSIGN
mapping_focls = {0:0, 1:2, -9999:np.nan, -8888:np.nan}
df['CLIN.FOCLSIGN'] = df['HI_M'].map(mapping_focls)
cols_to_save.append('CLIN.FOCLSIGN')
formb2_list.append('CLIN.FOCLSIGN')

# HI_Score -> HACHIN
def transform_hiscore(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif 0 <= value <= 12:
    return value
  else:
    return np.nan
df['CLIN.HACHIN'] = df['HI_Score'].apply(transform_hiscore)
cols_to_save.append('CLIN.HACHIN')
formb2_list.append('CLIN.HACHIN')

# IMH_VaD -> CVDCOG
mapping_cvdcog = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.CVDCOG'] = df['IMH_VaD'].map(mapping_cvdcog)
cols_to_save.append('CLIN.CVDCOG')
formb2_list.append('CLIN.CVDCOG')

## Form B3: Unified Parkinson's Disease Rating Scale (UPDRS)
formb3_list = []

# Single_Chair_Stand_Safe_Results -> ARISING
df['CLIN.ARISING'] = df['Single_Chair_Stand_Safe_Results']
cols_to_save.append('CLIN.ARISING')
formb3_list.append('CLIN.ARISING')

# Single_Chair_Stand_Failed -> ARISINGX
def transform_stand_failed(value):
  if value == -9999:
    return 'Not Applicable'
  elif value == -8888:
    return 'Refused'
  elif value == 1:
    return 'Tried but unable'
  elif value == 2:
    return 'Participant could not stand unassisted'
  elif value == 3:
    return 'Not attempted, you felt unsafe'
  elif value == 4:
    return 'Not attempted, participant felt unsafe'
  elif value == 5:
    return 'Participant unable to understand instructions'
  elif value == 6:
    return 'Other'
  else:
    return np.nan
df['CLIN.ARISINGX'] = df['Single_Chair_Stand_Failed'].apply(transform_stand_failed)
cols_to_save.append('CLIN.ARISINGX')
formb3_list.append('CLIN.ARISINGX')

# Aids_For_(First/Second)_Walk -> GAIT
aid1 = df['Aids_For_First_Walk']
aid2 = df['Aids_For_Second_Walk']
def transform_aids(aid1, aid2):
  aids = [aid1, aid2]
  if all(aid == -9999 for aid in aids):
    return np.nan
  if all(aid in [-8888, -9999] for aid in aids):
    return np.nan
  clean_aids = [a for a in aids if a not in [-9999, -8888]]
  if not clean_aids:
    return np.nan
  if all(a == 0 for a in clean_aids):
    return 0
  if all(a in [0, 1] for a in clean_aids):
    return 1
  if any(a == 1 for a in clean_aids) and not any (a == 2 for a in clean_aids):
    return 2
  if any(a == 2 for a in clean_aids):
    return 3
  return np.nan
df['CLIN.GAIT'] = df.apply(lambda row: transform_aids(row['Aids_For_First_Walk'], row['Aids_For_Second_Walk']), axis=1)
cols_to_save.append('CLIN.GAIT')
formb3_list.append('CLIN.GAIT')

# Gait_Speed_Failure_(1-2) -> GAITX
gait1 = df['Gait_Speed_Failure_1']
gait2 = df['Gait_Speed_Failure_2']
def transform_gait(gait1, gait2):
  gaits = [gait1, gait2]
  if all(gait == -9999 for gait in gaits):
    return 'Not applicable'
  if all(gait in [-8888, -9999] for gait in gaits):
    return 'Refused'
  clean_gaits = [g for g in gaits if g not in [-9999, -8888]]
  if not clean_gaits:
    return 'Refused'
  if all(g == 1 for g in clean_gaits):
    return 'Tried but unable'
  if all(g in [1, 2] for g in clean_gaits):
    return 'Participant could not walk unassisted'
  if all(g in [3, 4] for g in clean_gaits):
    if all(g == 3 for g in clean_gaits):
      return 'Not attempted, you felt unsafe'
    elif all(g == 4 for g in clean_gaits):
      return 'Not attempted, participant felt unsafe'
    else:
      return 'Not attempted, unsafe'
  if all(g == 5 for g in clean_gaits):
    return 'Participant did not understand instructions'
  if all(g in [5, 6] for g in clean_gaits):
    return 'Other'
  return 'Not applicable'
df['CLIN.GAITX'] = df.apply(lambda row: transform_gait(row['Gait_Speed_Failure_1'], row['Gait_Speed_Failure_2']), axis=1)
cols_to_save.append('CLIN.GAITX')
formb3_list.append('CLIN.GAITX')

## Form B4: CDR Dementia Staging Instrument Plus NACC FTLD Behavior & Language Domains (CDR Plus NACC FTLD)
# CDR_Memory -> MEMORY
df['COG.MEMORY'] = df['CDR_Memory']
cols_to_save.append('COG.MEMORY')

# CDR_Orientation -> ORIENT
df['COG.ORIENT'] = df['CDR_Orientation']
cols_to_save.append('COG.ORIENT')

# CDR_Judgment -> JUDGMENT
df['COG.JUDGMENT'] = df['CDR_Judgement']
cols_to_save.append('COG.JUDGMENT')

# CDR_CommunityAffairs -> COMMUN
df['COG.COMMUN'] = df['CDR_CommunityAffairs']
cols_to_save.append('COG.COMMUN')

# CDR_HomeandHobbies -> HOMEHOBB
df['COG.HOMEHOBB'] = df['CDR_HomeandHobbies']
cols_to_save.append('COG.HOMEHOBB')

# CDR_PersonalCare -> PERSCARE
df['COG.PERSCARE'] = df['CDR_PersonalCare']
cols_to_save.append('COG.PERSCARE')

# CDR_Sum -> CDRSUM
df['COG.CDRSUM'] = df['CDR_Sum']
cols_to_save.append('COG.CDRSUM')

# CDR_Global -> CDRGLOB
df['COG.CDRGLOB'] = df['CDR_Global']
cols_to_save.append('COG.CDRGLOB')

# CDR_J_SocialBehavior -> COMPORT
mapping_comport = {1:0, 2:2, 3:1, 4:0.5, -9999:np.nan, -8888:np.nan}
df['COG.COMPORT'] = df['CDR_J_SocialBehavior'].map(mapping_comport)
cols_to_save.append('COG.COMPORT')

## Form B5: Neuropsychiatric Inventory Questionnaire (NPI-Q)
# CDX_Depression, IMH_Depression, HI_F -> DEPD
dep1 = df['CDX_Depression']
dep2 = df['IMH_Depression']
dep3 = df['HI_F']
def transform_depd(dep1, dep2, dep3):
  deps = [dep1, dep2, dep3]
  if all(deps == -9999 for dep in deps):
    return np.nan
  if all(dep in [-8888, -9999] for dep in deps):
    return np.nan
  clean_deps = [d for d in deps if d not in [-9999, -8888]]
  if not clean_deps:
    return np.nan
  if all(d == 0 for d in clean_deps):
    return 0
  if all(d in [0, 1] for d in clean_deps):
    return 1
  return np.nan
df['COG.DEPD'] = df.apply(lambda row: transform_depd(row['CDX_Depression'], row['IMH_Depression'], row['HI_F']), axis=1)
cols_to_save.append('COG.DEPD')

# GDS_Category -> DEPDSEV
gds_cat = df['GDS_Category']
def transform_depdsev(gds_cat):
  if gds_cat == -9999:
    return np.nan
  elif gds_cat == -8888:
    return np.nan
  elif gds_cat == 'Normal':
    return 0
  elif gds_cat == 'Mild Depressive':
    return 1
  elif gds_cat == 'Moderate Depressive':
    return 2
  elif gds_cat == 'Severe Depressive':
    return 3
  return np.nan
df['COG.DEPDSEV'] = df['GDS_Category'].apply(transform_depdsev)
cols_to_save.append('COG.DEPDSEV')

# IMH_Anxiety, CDX_Anxiety -> ANX
def calculate_anxiety(row):
  vals = [row.get('IMH_Anxiety'), row.get('CDX_Anxiety')]
  if all(v == -9999 for v in vals):
    return np.nan
  if all(v in [-8888, -9999] for v in vals):
    return np.nan
  if 1 in vals:
    return 1
  if all(v == 0 for v in vals):
    return 0
  return np.nan
df['COG.ANX'] = df.apply(calculate_anxiety, axis=1)
cols_to_save.append('COG.ANX')

# GDS_9 -> ELAT
mapping_elat = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['COG.ELAT'] = df['GDS_9'].map(mapping_elat)
cols_to_save.append('COG.ELAT')

# GDS_Score_A -> APA
def transform_apa(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif value == 0:
    return 0
  else:
    return 1
  return np.nan
df['COG.APA'] = df['GDS_Score_A'].apply(transform_apa)
cols_to_save.append('COG.APA')

# PED_4_C -> IRR
mapping_irr = {0:0, 1:1, 3:9, -9999:np.nan, -8888:np.nan}
df['COG.IRR'] = df['PED_4_C'].map(mapping_irr)
cols_to_save.append('COG.IRR')

# CDR_PC_EatingHabits -> APP
mapping_app = {0:0, 1:1, 2:1, 3:1, -9999:np.nan, -8888:np.nan}
df['COG.APP'] = df['CDR_PC_EatingHabits'].map(mapping_app)
cols_to_save.append('COG.APP')

# CDP_PC_EatingHabits -> APPSEV
mapping_appsev = {0:8, 1:1, 2:2, 3:3, -9999:np.nan, -8888:np.nan}
df['COG.APPSEV'] = df['CDR_PC_EatingHabits'].map(mapping_appsev)
cols_to_save.append('COG.APPSEV')

## Form B6: Geriatric Depression Scale (GDS)
formb6_list = []

# GDS_1 -> SATIS
mapping_gds1 = {0:1, 1:0, -9999:np.nan, -8888:np.nan}
df['CLIN.SATIS'] = df['GDS_1'].map(mapping_gds1)
cols_to_save.append('CLIN.SATIS')
formb6_list.append('CLIN.SATIS')

# GDS_2 -> DROPACT
mapping_gds = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.DROPACT'] = df['GDS_2'].map(mapping_gds)
cols_to_save.append('CLIN.DROPACT')
formb6_list.append('CLIN.DROPACT')

# GDS_3 -> EMPTY
df['CLIN.EMPTY'] = df['GDS_3'].map(mapping_gds)
cols_to_save.append('CLIN.EMPTY')
formb6_list.append('CLIN.EMPTY')

# GDS_4 -> BORED
df['CLIN.BORED'] = df['GDS_4'].map(mapping_gds)
cols_to_save.append('CLIN.BORED')
formb6_list.append('CLIN.BORED')

# GDS_7 -> SPIRITS
df['CLIN.SPIRITS'] = df['GDS_7'].map(mapping_gds)
cols_to_save.append('CLIN.SPIRITS')
formb6_list.append('CLIN.SPIRITS')

# GDS_8 -> AFRAID
df['CLIN.AFRAID'] = df['GDS_8'].map(mapping_gds)
cols_to_save.append('CLIN.AFRAID')
formb6_list.append('CLIN.AFRAID')

# GDS_9 -> HAPPY
df['CLIN.HAPPY'] = df['GDS_9'].map(mapping_gds)
cols_to_save.append('CLIN.HAPPY')
formb6_list.append('CLIN.HAPPY')

# GDS_10 -> HELPLESS
df['CLIN.HELPLESS'] = df['GDS_10'].map(mapping_gds)
cols_to_save.append('CLIN.HELPLESS')
formb6_list.append('CLIN.HELPLESS')

# GDS_12 -> STAYHOME
df['CLIN.STAYHOME'] = df['GDS_12'].map(mapping_gds)
cols_to_save.append('CLIN.STAYHOME')
formb6_list.append('CLIN.STAYHOME')

# GDS_14 -> MEMPROB
df['CLIN.MEMPROB'] = df['GDS_14'].map(mapping_gds)
cols_to_save.append('CLIN.MEMPROB')
formb6_list.append('CLIN.MEMPROB')

# GDS_15 -> WONDRFUL
df['CLIN.WONDRFUL'] = df['GDS_15'].map(mapping_gds1)
cols_to_save.append('CLIN.WONDRFUL')
formb6_list.append('CLIN.WONDRFUL')

# GDS_17 -> WRTHLESS
df['CLIN.WRTHLESS'] = df['GDS_17'].map(mapping_gds)
cols_to_save.append('CLIN.WRTHLESS')
formb6_list.append('CLIN.WRTHLESS')

# GDS_21 -> ENERGY
df['CLIN.ENERGY'] = df['GDS_21'].map(mapping_gds1)
cols_to_save.append('CLIN.ENERGY')
formb6_list.append('CLIN.ENERGY')

# GDS_22 -> HOPELESS
df['CLIN.HOPELESS'] = df['GDS_22'].map(mapping_gds1)
cols_to_save.append('CLIN.HOPELESS')
formb6_list.append('CLIN.HOPELESS')

# GDS_23 -> BETTER
df['CLIN.BETTER'] = df['GDS_23'].map(mapping_gds)
cols_to_save.append('CLIN.BETTER')
formb6_list.append('CLIN.BETTER')

# GDS_Total -> NACCGDS
def transform_gdstotal(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  else:
    return value
  return np.nan
df['CLIN.NACCGDS'] = df['GDS_Total'].apply(transform_gdstotal)
cols_to_save.append('CLIN.NACCGDS')
formb6_list.append('CLIN.NACCGDS')

## Form B7: NACC Functional Assessment Scale (FAS)
# No mapped variables

## Form B8: Physical/Neurological Exam Findings
formb8_list = []

# HI_M -> SIVDFIND
mapping_sivdfind = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.SIVDFIND'] = df['HI_M'].map(mapping_sivdfind)
cols_to_save.append('CLIN.SIVDFIND')
formb8_list.append('CLIN.SIVDFIND')

## Form B9: Clinical Judgment of Symptoms
formb9_list = []

# CDR_M_PastYearDecline -> DECSUB
mapping_decsub = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.DECSUB'] = df['CDR_M_PastYearDecline'].map(mapping_decsub)
cols_to_save.append('CLIN.DECSUB')
formb9_list.append('CLIN.DECSUB')

# CDR_M_PastYearDecline -> DECIN
mapping_decin = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.DECIN'] = df['CDR_M_PastYearDecline'].map(mapping_decin)
cols_to_save.append('CLIN.DECIN')
formb9_list.append('CLIN.DECIN')

# CDX_Ipm -> DECCLCOG
mapping_decclcog = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.DECCLCOG'] = df['CDX_Ipm'].map(mapping_decclcog)
cols_to_save.append('CLIN.DECCLCOG')
formb9_list.append('CLIN.DECCLCOG')

# CDX_Cog -> COGMEM
mapping_cogmem = {0:0, 1:1, 2:1, 9:np.nan, -9999:np.nan, -8888:np.nan}
df['CLIN.COGMEM'] = df['CDX_Cog'].map(mapping_cogmem)
cols_to_save.append('CLIN.COGMEM')
formb9_list.append('CLIN.COGMEM')

# HI_C -> COGFLUC
mapping_cogfluc = {0:0, 2:1, -9999:np.nan, -8888:np.nan}
df['CLIN.COGFLUC'] = df['HI_C'].map(mapping_cogfluc)
cols_to_save.append('CLIN.COGFLUC')
formb9_list.append('CLIN.COGFLUC')

# GDS_Score_A ->BEAPATHY
def transform_gds_a(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif value == 0:
    return 0
  else:
    return 1
  return np.nan
df['CLIN.BEAPATHY'] = df['GDS_Score_A'].apply(transform_gds_a)
cols_to_save.append('CLIN.BEAPATHY')
formb9_list.append('CLIN.BEAPATHY')

## Forms C1, C2, C2T: Neuropsychological Battery Summary Scores
# MMSE_(1-5) -> MMSEORDA
def transform_mmseorda(row):
  mmse_vals = [row[f'MMSE_{i}'] for i in range(1, 6)]
  if all(val == -9999 for val in mmse_vals):
    return np.nan
  if all(val in [-8888, -9999] for val in mmse_vals):
    return np.nan
  valid_vals = [val for val in mmse_vals if val in [0, 1]]
  return sum(valid_vals)
df['COG.MMSEORDA'] = df.apply(transform_mmseorda, axis=1)
cols_to_save.append('COG.MMSEORDA')

# MMSE_(6-10) -> MMSEORLO
def transform_mmseorlo(row):
  mmse_vals = [row[f'MMSE_{i}'] for i in range(6, 11)]
  if all(val == -9999 for val in mmse_vals):
    return np.nan
  if all(val in [-8888, -9999] for val in mmse_vals):
    return np.nan
  valid_vals = [val for val in mmse_vals if val in [0, 1]]
  return sum(valid_vals)
df['COG.MMSEORLO'] = df.apply(transform_mmseorlo, axis=1)
cols_to_save.append('COG.MMSEORLO')

# MMSE_19 -> PENTAGON
mapping_pentagon = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['COG.PENTAGON'] = df['MMSE_19'].map(mapping_pentagon)
cols_to_save.append('COG.PENTAGON')

# MMSE_Total -> NACCMMSE
def transform_naccmmse(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  else:
    return value
  return np.nan
df['COG.NACCMMSE'] = df['MMSE_Total'].apply(transform_naccmmse)
cols_to_save.append('COG.NACCMMSE')

# DSF_Total -> DIGIF
def transform_digifb(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif 0 <= value <= 12:
    return value
  else:
    return np.nan
  return np.nan
df['COG.DIGIF'] = df['DSF_Total'].apply(transform_digifb)
cols_to_save.append('COG.DIGIF')

# DSB_Total -> DIGIB
df['COG.DIGIB'] = df['DSB_Total'].apply(transform_digifb)
cols_to_save.append('COG.DIGIB')

# Animal_Total -> ANIMALS
def transform_animals(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  else:
    return value
  return np.nan
df['COG.ANIMALS'] = df['Animal_Total'].apply(transform_animals)
cols_to_save.append('COG.ANIMALS')

# Trails_A_Time -> TRAILA
def transform_traila(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif value <= 150:
    return value
  elif value > 150:
    return 150
  else:
    return np.nan
df['COG.TRAILA'] = df['Trails_A_Time'].apply(transform_traila)
cols_to_save.append('COG.TRAILA')

# Trails_A_Errors -> TRAILARR
def transform_trailarr(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  else:
    return value
  return np.nan
df['COG.TRAILARR'] = df['Trails_A_Errors'].apply(transform_trailarr)
cols_to_save.append('COG.TRAILARR')

# Trails_B_Time -> TRAILB
def transform_trailb(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif value <= 300:
    return value
  elif value > 300:
    return 300
  else:
    return np.nan
df['COG.TRAILB'] = df['Trails_B_Time'].apply(transform_trailb)
cols_to_save.append('COG.TRAILB')

# Trails_B_Errors -> TRAILBRR
def transform_trailbrr(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  else:
    return value
  return np.nan
df['COG.TRAILBRR'] = df['Trails_B_Errors'].apply(transform_trailbrr)
cols_to_save.append('COG.TRAILBRR')

# Digit_Symbol_Substitution -> WAIS
def transform_wais(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  else:
    return value
  return np.nan
df['COG.WAIS'] = df['Digit_Symbol_Substitution'].apply(transform_wais)
cols_to_save.append('COG.WAIS')

# FAS_Count_F -> UDSVERFC
def transform_udsverfc(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  else:
    return value
  return np.nan
df['COG.UDSVERFC'] = df['FAS_Count_F'].apply(transform_udsverfc)
cols_to_save.append('COG.UDSVERFC')

## Form D1: Clinician Diagnosis
formd1_list = []

# CDX_Cog -> NACCUDSD
mapping_naccudsd = {0:1, 1:2, 2:4, 9:np.nan, -9999:np.nan, -8888:np.nan}
df['CLIN.NACCUDSD'] = df['CDX_Cog'].map(mapping_naccudsd)
cols_to_save.append('CLIN.NACCUDSD')
formd1_list.append('CLIN.NACCUDSD')

# IMH_FTD -> NACCBVFT
mapping_naccbvft = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.NACCBVFT'] = df['IMH_FTD'].map(mapping_naccbvft)
cols_to_save.append('CLIN.NACCBVFT')
formd1_list.append('CLIN.NACCBVFT')

# IMH_Lewybodies -> NACCLBDS
mapping_nacclbds = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.NACCLBDS'] = df['IMH_Lewybodies'].map(mapping_nacclbds)
cols_to_save.append('CLIN.NACCLBDS')
formd1_list.append('CLIN.NACCLBDS')

# IMH_Dementia_Other_1Type -> NAMNDEM
def transform_dementia(value):
  if value == -9999:
    return np.nan
  elif value == -8888:
    return np.nan
  elif value == 0:
    return 0
  elif value == 1:
    return 1
  else:
    return np.nan
df['CLIN.NAMDEM'] = df['IMH_Dementia_Other_1Type'].apply(transform_dementia)
cols_to_save.append('CLIN.NAMDEM')
formd1_list.append('CLIN.NAMDEM')

# CDX_CVD -> CVD
mapping_cvd = {0:0, 1:1, -9999:np.nan, -8888:np.nan}
df['CLIN.CVD'] = df['CDX_CVD'].map(mapping_cvd)
cols_to_save.append('CLIN.CVD')
formd1_list.append('CLIN.CVD')

# CDX_Alcohol -> ALCABUSE
df['CLIN.ALCABUSE'] = df['HLT.ALCOHOL']
cols_to_save.append('CLIN.ALCABUSE')
formd1_list.append('CLIN.ALCABUSE')

## Form D2: Clinician-assessed Medical Conditions
formd2_list = []

# IMH_Cancer -> CANCER
mapping_cancer = {0:0, 1:2, -9999:np.nan, -8888:np.nan}
df['CLIN.CANCER'] = df['IMH_Cancer'].map(mapping_cancer)
cols_to_save.append('CLIN.CANCER')
formd2_list.append('CLIN.CANCER')

# IMH_CancerType -> CANCSITE
df['CLIN.CANCSITE'] = df['IMH_CancerType'].replace(-9999, 'Not applicable')
def clean_cancer_location(value):
  if value == 'Not applicable' or pd.isna(value):
    return np.nan
  val = str(value).lower().strip()
  if re.search(r'breast', val):
    return 'Breast'
  elif re.search(r'prostat', val):
    return 'Prostate'
  elif re.search(r'leukemia', val):
    return 'Blood and bone Marrow'
  elif re.search(r'colon', val):
    return 'Colon'
  elif re.search(r'skin', val):
    return 'Skin'
  elif re.search(r'endo', val):
    return 'Endometrium'
  elif re.search(r'esophageal', val):
    return 'Esophagus'
  elif re.search(r'cervi', val):
    return 'Cervix'
  elif re.search(r'thyroid', val):
    return 'Thyroid Gland'
  elif re.search(r'liver', val):
    return 'Liver'
  elif re.search(r'kidney', val):
    return 'Kidney'
  elif re.search(r'ovar', val):
    return 'Ovary'
  elif re.search(r'marrow', val):
    return 'Bone Marrow'
  elif re.search(r'testi', val):
    return 'Testicles'
  elif re.search(r'vulva', val):
    return 'Vulva'
  elif re.search(r'lymphoma', val):
    return 'Lymphatic System'
  elif re.search(r'basil', val):
    return 'Skin'
  elif re.search(r'basal', val):
    return 'Skin'
  elif re.search(r'squamous', val):
    return 'Skin'
  elif re.search(r'melanoma', val):
    return 'Skin'
  elif re.search(r'lung', val):
    return 'Lung'
  elif re.search(r'saliv', val):
    return 'Salivary Gland'
  elif re.search(r'bone', val):
    return 'Bone'
  elif re.search(r'uter', val):
    return 'Uterus'
  elif re.search(r'carci', val):
    return 'Epithelial Tissue'
  elif re.search(r'osteosarcoma', val):
    return 'Bone'
  elif re.search(r'renal', val):
    return 'Kidney'
  elif re.search(r'stomach', val):
    return 'Stomach'
  elif re.search(r'neoplasm', val):
    return 'Bone Marrow'
  elif re.search(r'spleen', val):
    return 'Spleen'
  elif re.search(r'bladder', val):
    return 'Bladder'
  elif re.search(r'muco', val):
    return 'Salivary Gland'
  elif re.search(r'over', val):
    return 'Ovary'
  elif re.search(r'throat', val):
    return 'Throat'
  elif re.search(r'cologne', val):
    return 'Colon'
  elif re.search(r'indometrial', val):
    return 'Endometrium'
  elif re.search(r'mesothelioma', val):
    return 'Lining of the Lungs, Abdomen, Heart, or Testicles'
  elif re.search(r'gallbladder', val):
    return 'Gallbladder'
  elif re.search('gastro', val):
    return 'Stomach'
  elif re.search(r'pulmonary', val):
    return 'Lung'
  else:
    return np.nan
  return np.nan
df['CLIN.CANCSITE'] = df['IMH_CancerType'].apply(clean_cancer_location)
cols_to_save.append('CLIN.CANCSITE')
formd2_list.append('CLIN.CANCSITE')

# IMH_Diabetes, CDX_Diabetes -> DIABET
df['CLIN.DIABET'] = df['HLT.DIABETES']
cols_to_save.append('CLIN.DIABET')
formd2_list.append('CLIN.DIABET')

# CDX_Hypertension, HI_I -> HYPERT
def transform_hypert(row):
  hi = row['CLIN.HXHYPER']
  cdx = row['HLT.HYPERTENSION']
  if hi == -9999 and cdx == -9999:
    return np.nan
  elif (hi == -8888 and cdx == -8888) or ({hi, cdx} == {-8888, -9999}):
    return np.nan
  elif hi in [-9999, -8888] and cdx in [0, 1]:
    return cdx
  elif cdx in [-9999, -8888] and hi in [0, 1]:
    return hi
  elif hi == 0 and cdx == 0:
    return 0
  elif hi in [0, 1] and cdx in [0, 1]:
    return 1
  else:
    return np.nan
df['CLIN.HYPERT'] = df.apply(transform_hypert, axis=1)
cols_to_save.append('CLIN.HYPERT')
formd2_list.append('CLIN.HYPERT')

# CDP_HeartDisease -> ANGINA
df['CLIN.ANGINA'] = df['HLT.CVANGINA']
cols_to_save.append('CLIN.ANGINA')
formd2_list.append('CLIN.ANGINA')

# CDX_VitaminB12 -> VB12DEF
df['CLIN.VB12DEF'] = df['HLT.B12DEF']
cols_to_save.append('CLIN.VB12DEF')
formd2_list.append('CLIN.VB12DEF')

# IMH_ThyroidDisease, CDX_Hypothyroid, CDX_Hyperthyroid -> THYDIS
df['CLIN.THYDIS'] = df['HLT.THYROID']
cols_to_save.append('CLIN.THYDIS')
formd2_list.append('CLIN.THYDIS')

# IMH_Arthritis -> ARTH
df['CLIN.ARTH'] = df['HLT.ARTHRIT']
cols_to_save.append('CLIN.ARTH')
formd2_list.append('CLIN.ARTH')

# CDR_PC_SphincterControl -> URINEINC
df['CLIN.URINEINC'] = df['HLT.INCONTU']
cols_to_save.append('CLIN.URINEINC')
formd2_list.append('CLIN.URINEINC')

new_df = df[cols_to_save]
new_df.to_excel(output_path, index=False)

"""# **Prompt Generation**"""

# print(form1_list)
# print(forma1_list)
# print(forma2_list)
# print(forma3_list)
# print(forma4_list)
# print(forma5_list)
# print(formb1_list)
# print(formb2_list)
# print(formb3_list)
# print(formb6_list)
# print(formb8_list)
# print(formb9_list)
# print(formd1_list)
# print(formd2_list)